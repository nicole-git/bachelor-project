#parse("/view/layout.vm")
#@mainLayout()
<div id="create-exercise-vue" v-cloak>
    <v-app>
        <v-container>
            <div id="exercise-content">
                <div id="exercise-left-container">
                    <div id="exercise-info">
                        <v-form v-model="valid">
                            <v-text-field box v-model="exercise.title" label="Title" :rules="[v => v.length > 5 || 'Must be longer than 5 characters']"></v-text-field>
                            <v-text-field box v-model="exercise.description" label="Description" :rules="[v => v.length > 5 || 'Must be longer than 5 characters']"></v-text-field>
                            <v-text-field box v-model="exercise.instructions" label="Instructions" multi-line :rules="[v => v.length > 50 || 'Must be longer than 50 characters']"></v-text-field>
                            <v-btn color="white" @click="showDeleteExerciseDialog = true">Delete exercise</v-btn>
                            <v-btn color="white" :disabled="!valid" @click="saveExercise(true)">Save exercise</v-btn>
                        </v-form>
                    </div>
                </div>
                <div id="exercise-right-container">
                    <v-data-table
                            :headers="languageTableHeaders"
                            :items="exercise.languages"
                            hide-actions
                            class="elevation-1"
                    >
                        <template slot="items" slot-scope="props">
                            <td>{{ props.item }}</td>
                            <td class="justify-center layout px-0">
                                <v-btn icon class="mx-0" @click="openDialog(props.item)">
                                    <v-icon color="orange darken-4">edit</v-icon>
                                </v-btn>
                                <v-btn icon class="mx-0" @click="deleteLanguage(props.item)">
                                    <v-icon color="red darken-4">delete</v-icon>
                                </v-btn>
                            </td>
                        </template>
                        <template slot="footer">
                            <td colspan="100%">
                                <v-layout row justify-center><v-btn color="blue darken-1" flat @click="openDialog(null)">Add language</v-btn></v-layout>
                            </td>
                        </template>
                    </v-data-table>
                    <v-layout row justify-center>
                        <v-dialog v-model="addCodeDialog.show" persistent max-width="800px">
                            <v-card>
                                <v-card-title>
                                    <span class="headline">Add start/test code</span>
                                </v-card-title>
                                <v-card-text>
                                    <v-container grid-list-md>
                                        <v-form v-model="addCodeDialog.valid">
                                        <v-layout wrap>
                                            <v-flex xs12>
                                                <v-select v-model="addCodeDialog.language" :items="supportedLanguages" label="Choose language" autocomplete></v-select>
                                            </v-flex>
                                            <v-text-field v-model="addCodeDialog.startCode" box multi-line label="Start-code"></v-text-field>
                                            <v-expansion-panel class="add-testcode-expansion-panel ">
                                                <v-expansion-panel-content v-for="(item,i) in addCodeDialog.testCode" :key="i">
                                                    <div slot="header">
                                                        Test {{i+1}} <span v-if="addCodeDialog.testCode[i].length === 0">(empty test)</span>
                                                        <v-btn v-if="addCodeDialog.testCode.length >= 2" icon class="mx-0" @click="addCodeDialog.testCode.splice(i, 1)">
                                                            <v-icon color="red darken-4">delete</v-icon>
                                                        </v-btn>
                                                    </div>
                                                    <v-text-field
                                                            v-model="addCodeDialog.testCode[i]"
                                                            box
                                                            multi-line label="Test-code"
                                                            :rules="[v => v.length > 5 || 'Must be longer than 5 characters']">
                                                    </v-text-field>
                                                </v-expansion-panel-content>
                                            </v-expansion-panel>
                                        </v-layout>
                                        </v-form>
                                    </v-container>
                                </v-card-text>
                                <v-card-actions>
                                    <v-btn color="blue darken-1" flat @click.native="addCodeDialog.testCode.push('')">Add test</v-btn>
                                    <v-spacer></v-spacer>
                                    <v-btn color="blue darken-1" flat @click.native="addCodeDialog.show = false">Close</v-btn>
                                    <v-btn color="blue darken-1" :disabled="!addCodeDialog.valid" flat @click.native="addLanguageToExercise">Add to exercise</v-btn>
                                </v-card-actions>
                            </v-card>
                        </v-dialog>
                    </v-layout>
                </div>
            </div>
            <v-snackbar :timeout="3000" v-model="showSnackbar">
                {{ snackbarText }}
                <v-btn dark flat @click.native="showSnackbar = false">Close</v-btn>
            </v-snackbar>
            <v-layout row justify-center>
                <v-dialog v-model="showDeleteExerciseDialog" max-width="290">
                    <v-card>
                        <v-card-title class="headline">Are you sure you want to delete this exercise?</v-card-title>
                        <v-card-text>This will permanently exercise the lesson from the database.</v-card-text>
                        <v-card-actions>
                            <v-spacer></v-spacer>
                            <v-btn color="green darken-4" flat="flat" @click.native="showDeleteExerciseDialog = false">No</v-btn>
                            <v-btn color="red  darken-4" flat="flat" @click.native="deleteExercise">Yes</v-btn>
                        </v-card-actions>
                    </v-card>
                </v-dialog>
            </v-layout>
        </v-container>
    </v-app>
</div>
<script>
    new Vue({
        el: '#create-exercise-vue',
        data: {
            supportedLanguages: [
                "PYTHON",
                "JAVASCRIPT",
                "RUBY",
                "GROOVY"
            ],
            showDeleteExerciseDialog: false,
            showSnackbar: false,
            snackbarText: "",
            valid: false,
            languageTableHeaders: [
                { text: "Language", sortable: false },
                { text: "Actions", sortable: false, align: "center", width: "1px" }
            ],
            exercise: {
                title: "",
                description: "",
                instructions: "",
                languages: []
            },
            addCodeDialog: {
                valid: false,
                language: "python",
                startCode: "",
                testCode: [],
                show: false
            }
        },
        methods: {
            deleteExercise: function () {
                axios.delete("/api/lessons/$lessonId/exercises/$exerciseId").then(() => {
                    window.location = "/lessons/$lessonId";
                }).catch(() => {
                    alert("An error occurred.");
                });
            },
            saveExercise: function (showSnackbar) {
                let data = {
                    title: this.exercise.title,
                    description: this.exercise.description,
                    instructions: this.exercise.instructions,
                };
                axios.patch("/api/exercises/$exerciseId", data).then(() => {
                    if (showSnackbar) {
                        this.showSnackbar = true;
                        this.snackbarText = "Exercise saved!";
                    }
                }).catch(() => {
                    if (showSnackbar) {
                        this.showSnackbar = true;
                        this.snackbarText = "Failed to save exercise.";
                    }
                });
            },
            addLanguageToExercise: function () {
                let data = {
                    startCode: {
                        [this.addCodeDialog.language]: this.addCodeDialog.startCode
                    },
                    testCode: {
                        [this.addCodeDialog.language]: this.addCodeDialog.testCode
                    }
                };
                axios.put("/api/exercises/$exerciseId/language", data).then(() => {
                    this.showSnackbar = true;
                    this.snackbarText = "Start/test code added!";
                    this.addCodeDialog.show = false;
                    this.getExercise();
                }).catch(() => {
                    this.showSnackbar = true;
                    this.snackbarText = "Failed to add start/test code.";
                });
            },
            openDialog: function (language) {
                if (language) { // editing an existing language
                    this.addCodeDialog.language = language;
                    this.addCodeDialog.startCode = this.exercise.startCode[language];
                    this.addCodeDialog.testCode = this.exercise.testCode[language];
                } else {
                    this.addCodeDialog.language = "PYTHON";
                    this.addCodeDialog.startCode = "";
                    this.addCodeDialog.testCode = [""];
                }
                this.saveExercise(false);
                this.addCodeDialog.show = true;
            },
            getExercise: function () {
                axios.get("/api/exercises/$exerciseId").then(response => {
                    this.exercise = response.data;
                    this.exercise.languages = Object.keys(this.exercise.testCode || {});
                });
            },
            deleteLanguage: function (language) {
                axios.delete("/api/exercises/$exerciseId/language?language=" + language).then(() => {
                    this.getExercise();
                });
            }
        },
        created: function () {
            this.getExercise();
        }
    });
</script>
#end
