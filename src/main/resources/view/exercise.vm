#parse("/view/layout.vm")
#@mainLayout()
<div id="exercise-vue" v-cloak>
    <v-app>
        <v-container>
            <div class="exercise-info">
                <h1>{{title}}</h1>
                <div v-if="showInstructions" class="description">
                    <p>{{instructions}}</p>
                </div>
                <div class="toggle" @click="showInstructions = !showInstructions">
                    <i class="fa fa-plus open" aria-hidden="true"></i>
                    <i class="fa fa-minus close" aria-hidden="true"></i>
                </div>
            </div>
            <div id="editor-wrap">
                <div id="top-bar">
                    <select id="lang-select" v-model="currentLanguage" id="language-select" name="language">
                        <option v-for="language in languages" :value="language">{{language}}</option>
                    </select>
                </div>
                <div id="editor">...</div>
                <div v-if="output.length === 0" class="output">No output yet. Run code or check answer.</div>
                <div v-else class="output">{{output}}</div>
            </div>
            <v-btn color="white" @click="runCode('noTest')">Run code</v-btn>
            <v-btn color="white" @click="runCode('withTest')">Check answer</v-btn>
        </v-container>
    </v-app>
</div>
<script>
    new Vue({
        el: "#exercise-vue",
        data: {
            editor: null,
            exerciseId: "",
            title: "",
            instructions: "",
            userCode: {}, // key is language, value is code for that language
            languages: [],
            currentLanguage: "",
            showInstructions: true,
            output: "",
        },
        watch: {
            currentLanguage: function (newLanguage) {
                this.editor.getSession().setValue(this.userCode[newLanguage]);
                this.editor.getSession().setMode("ace/mode/" + newLanguage.toLowerCase());
            }
        },
        methods: {
            getData: function () {
                return { // the json we send to the server, which is mapped to CodeRunningInput.java
                    exerciseId: this.exerciseId,
                    language: this.currentLanguage,
                    code: this.userCode[this.currentLanguage]
                }
            },
            runCode: function (action) {
                this.output = "Running code ...";
                let url = action === "withTest" ? "/api/run-code-with-test" : "/api/run-code";
                axios.post(url, this.getData()).then(response => {
                    this.output = response.data.message || "Running code produced no output.";
                }).catch(() => {
                    alert("An error occurred")
                });
            },
        },
        mounted: function () {
            let editor = ace.edit("editor");
            editor.$blockScrolling = "Infinity"; // remove annoying log lines
            editor.setTheme("ace/theme/monokai");
            editor.getSession().setMode("ace/mode/javascript");
            editor.setShowPrintMargin(false);
            editor.renderer.setScrollMargin(8, 8);
            editor.getSession().on("change", () => {
                this.userCode[this.currentLanguage] = this.editor.getValue();
            });
            this.editor = editor;
            axios.get("/api/exercises/$exerciseId").then(response => {
                let exercise = response.data;
                this.exerciseId = exercise.id;
                this.title = exercise.title;
                this.instructions = exercise.instructions;
                this.userCode = exercise.startCode;
                this.languages = Object.keys(exercise.startCode);
                this.currentLanguage = this.languages[0];
            });
        },
    });
</script>
#end
