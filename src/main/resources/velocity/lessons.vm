#parse("/velocity/layout.vm")
#@mainLayout()
<h1>Lessons</h1>
<div id="lessons-vue" v-cloak>
    <v-app>
        <v-container fluid>
            <v-layout row wrap>
                <v-flex xs4>
                    <div class="refine-container">
                        <div id="filter-lessons">
                            <h2>Filter</h2>
                            <v-switch color="green" label="Beginner" v-model="includeBeginner"></v-switch>
                            <v-switch color="green" label="Intermediate" v-model="includeIntermediate"></v-switch>
                            <v-switch color="green" label="Advanced" v-model="includeAdvanced"></v-switch>
                        </div>
                        <v-btn v-if="isAdmin" @click="addLesson">Add new lesson</v-btn>
                    </div>
                </v-flex>
                <v-flex xs8>
                    <h2 v-if="filteredLessons.length === 0">No lessons matching filter</h2>
                    <ul id="lesson-list" class="block-list">
                        <li v-for="lesson in filteredLessons" class="block">
                            <a :href="`/lessons/${lesson.id}`">
                                <div class="block__title"> {{ lesson.title }}</div>
                                <div class="block__description"> {{ lesson.description }}</div>
                            </a>
                        </li>
                    </ul>
                </v-flex>
            </v-layout>
        </v-container>
    </v-app>
</div>
<script>
    new Vue({
        el: '#lessons-vue',
        data: {
            lessons: [],
            includeBeginner: true,
            includeIntermediate: true,
            includeAdvanced: true,
            isAdmin: false,
            message: "",
        },
        methods: {
            addLesson: function () {
                let blankLesson = {
                    title: "New lesson",
                    difficulty: "BEGINNER",
                    text: "",
                    exerciseIds: []
                };
                axios.post("/api/lessons", blankLesson).then(response => {
                    window.location = `/lessons/${response.data.id}`;
                });
            }
        },
        computed: {
            filteredLessons: function () {
                return (this.lessons || []).filter(lesson => {
                    if (this.includeBeginner && lesson.difficulty === "BEGINNER") {
                        return true;
                    }
                    if (this.includeIntermediate && lesson.difficulty === "INTERMEDIATE") {
                        return true;
                    }
                    if (this.includeAdvanced && lesson.difficulty === "ADVANCED") {
                        return true;
                    }
                });
            }
        },
        created: function () {
            axios.get("/api/lessons").then(response => {
                this.lessons = response.data;
            });
            axios.get("/api/user").then(response => {
                this.isAdmin = response.data.admin;
            });
        }
    });
</script>
#end
