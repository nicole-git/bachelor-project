#parse("/velocity/layout.vm")
#@mainLayout()
<div id="statistics-vue" v-cloak>
    <v-app>
        <v-container>
            <v-select v-model="selectedChart" :items="chartOptions" label="Select chart to view" autocomplete></v-select>
            <v-select v-model="selectedStudentOption" :items="studentOptions" label="Select student" autocomplete></v-select>
            <div id="chart_div"></div>
        </v-container>
    </v-app>
</div>
<script>
    var NUMBER_OF_ATTEMPTS_PER_EXERCISE = "Number of attempts per exercise";
    var AVERAGE_ATTEMPTS_BEFORE_SOLVE_PER_EXERCISE = "Average attempts before solve per exercise";
    var NUMBER_OF_SOLVES_PER_EXERCISE = "Number of solves per exercise";

    new Vue({
        el: "#statistics-vue",
        data: {
            selectedStudentOption: "All students",
            selectedChart: NUMBER_OF_ATTEMPTS_PER_EXERCISE,
            chartOptions: [
                NUMBER_OF_ATTEMPTS_PER_EXERCISE,
                AVERAGE_ATTEMPTS_BEFORE_SOLVE_PER_EXERCISE,
                NUMBER_OF_SOLVES_PER_EXERCISE
            ],
            students: [],
        },
        computed: {
            studentOptions: function () {
                return ["All students"].concat(this.students.map(student => student.userId));
            },
        },
        watch: {
            selectedStudentOption: function () {
                this.getDataAndDrawChart()
            },
            selectedChart: function () {
                this.getDataAndDrawChart()
            },
        },
        created: function () {
            axios.get("/api/statistics/students").then(response => {
                this.students = this.students.concat(response.data);
            });
            this.getDataAndDrawChart();
        },
        methods: {
            getDataAndDrawChart: function () {
                var student = this.selectedStudentOption;
                var path = student === "All students" ? "/api/statistics/exercises" : "/api/statistics/students/" + student;
                axios.get(path).then(response => {
                    var graphData = [];
                    graphData.push(["Exercise", this.selectedChart]);
                    response.data.forEach(element => {
                        if (this.selectedChart === NUMBER_OF_ATTEMPTS_PER_EXERCISE) {
                            graphData.push([element.exerciseTitle, element.totalAttempts]);
                        } else if (this.selectedChart === AVERAGE_ATTEMPTS_BEFORE_SOLVE_PER_EXERCISE) {
                            graphData.push([element.exerciseTitle, element.averageAttemptsBeforeSolve]);
                        } else if (this.selectedChart === NUMBER_OF_SOLVES_PER_EXERCISE) {
                            graphData.push([element.exerciseTitle, element.totalSolves]);
                        }
                    });
                    google.charts.load('current', {packages: ['corechart', 'bar']});
                    google.charts.setOnLoadCallback(() => this.drawChart(graphData, this.selectedChart));
                });
            },
            drawChart: function (graphData, title) {
                var data = google.visualization.arrayToDataTable(graphData);
                var options = {
                    title: title,
                    width: "100%",
                    height: 400,
                    bar: {groupWidth: '95%'},
                    legend: {position: 'none'},
                };
                var chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
                chart.draw(data, options);
            }
        }
    });
</script>
#end
